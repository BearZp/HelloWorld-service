# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/'
    exclude:
      - '../src/DependencyInjection/'
      - '../src/Entity/'
      - '../src/Kernel.php'
      - '../src/AmpServiceKernel.php'
      - '../src/SwooleServiceKernel.php'
      - '../src/Tests/'
      - '../src/Doctrine/'

  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
#  App\Controller\:
#    resource: '../src/Controller/'
#    tags: ['controller.service_arguments']
#    arguments:
#      - '@service_container'
#    calls:
#      - setLogger: ['@logger']

  App\Controller\Level\:
    resource: '../src/Controller/Level/'
    arguments:
      - '@level.component'
    tags: ['controller.service_arguments']
    calls:
      - setLogger: [ '@logger' ]

  App\Controller\UserLevel\:
    resource: '../src/Controller/UserLevel/'
    arguments:
      - '@userLevel.component'
    tags: ['controller.service_arguments']
    calls:
      - setLogger: [ '@logger' ]

  App\Controller\Question\:
    resource: '../src/Controller/Question/'
    arguments:
      - '@question.component'
    tags: [ 'controller.service_arguments' ]
    calls:
      - setLogger: [ '@logger' ]

  App\Controller\Answer\:
    resource: '../src/Controller/Answer/'
    arguments:
      - '@answer.component'
    tags: [ 'controller.service_arguments' ]
    calls:
      - setLogger: [ '@logger' ]

  App\Controller\Directory\:
    resource: '../src/Controller/Directory/'
    arguments:
      - '@directory.component'
    tags: [ 'controller.service_arguments' ]
    calls:
      - setLogger: [ '@logger' ]


### SYSTEM ###

  App\EventSubscriber\TokenSubscriber:
    class: App\EventSubscriber\TokenSubscriber
    arguments:
      - '%authToken%'
    tags: ['kernel.event_subscriber']

  kernel.event_listener.json_request_transformer:
    class: App\EventSubscriber\JsonRequestTransformerListener
    tags:
      - {
        name: "kernel.event_listener",
        event: "kernel.request",
        method: "onKernelRequest",
        priority: "100"
      }

  connection.master:
    class: App\Doctrine\pgsql\Connection
    arguments:
      $params:
        host: '%env(resolve:DATABASE_HOST)%' #'%database_host%'
        port: '%env(resolve:DATABASE_PORT)%' #'%database_port%'
        dbname: '%env(resolve:DATABASE_NAME)%' #'%database_name%'
        user:     '%env(resolve:DATABASE_USER)%' #'%database_user%'
        password: '%env(resolve:DATABASE_PASSWORD)%' #'%database_password%'
        charset: UTF8
      $driver: '@App\Doctrine\pgsql\Driver'
    public: true

  connection.slave:
    class: App\Doctrine\pgsql\Connection
    arguments:
      $params:
        host: '%env(resolve:DATABASE_HOST)%' #'%database_host%'
        port: '%env(resolve:DATABASE_PORT)%' #'%database_port%'
        dbname: '%env(resolve:DATABASE_NAME)%' #'%database_name%'
        user:     '%env(resolve:DATABASE_USER)%' #'%database_user%'
        password: '%env(resolve:DATABASE_PASSWORD)%' #'%database_password%'
        charset: UTF8
      $driver: '@App\Doctrine\pgsql\Driver'
    public: true

  App\Doctrine\pgsql\Driver:
    class: App\Doctrine\pgsql\Driver
    autowire: true
    autoconfigure: true

  # add more service definitions when explicit configuration is needed
  # please note that last definitions always *replace* previous ones

  logger:
    class: Tools\logger\FileLogger
    arguments:
      - '%logger.filePath%'
      - '%logger.levelLimit%'
    public: true

  amqpProtocol:
    class: Tools\protocol\AmqpProtocol
    arguments:
      - '@lazyAmqpConnection'
      - '%env(resolve:RABBITMQ_QUEUE)%'
      - true
      - '%clientConnectionTimeout%'
    public: true

  lazyAmqpConnection:
    class: Tools\queues\rabbitMq\LazyRabbitMqConnectionProvider
    arguments:
      - '%env(resolve:RABBITMQ_HOST)%'
      - '%env(resolve:RABBITMQ_PORT)%'
      - '%env(resolve:RABBITMQ_USER)%'
      - '%env(resolve:RABBITMQ_PASS)%'
      - '%env(resolve:RABBITMQ_VHOST)%'
    public: true